---

# This file is part of the k8s-gluster-heketi-ansible project,
# an ansible collection to install glusterfs and heketi into
# kubernetes to provide dynamic persistent volumes.
#
# (c) contributors of manics/ansible-role-k8s-heketi-gluster
# (c) 2020 Andreas Florath, Deutsche Telekom AG
#
# By default all files of this project are licensed under the Apache-2.0
# license. For details see the file 'LICENSE' in the top directory.
# https://opensource.org/licenses/Apache-2.0
#
# SPDX-License-Identifier: Apache-2.0

- name: "Create configuration directory"
  file:
    state: directory
    path: "{{ heketi_config_dir }}"
    owner: root
    group: root
    mode: '0755'

- name: "Create topology file"
  template:
    src: heketi-topology.json
    dest: "{{ heketi_config_dir }}/heketi-topology.json"
    owner: root
    group: root
    mode: '0644'

- name: "Download heketi client"
  shell: |
    . /etc/proxy.sh && wget -O "{{ heketi_config_dir }}/heketi-client-linux.amd64.tar.gz" "{{ heketi_client_url }}"

- name: "Set heketi-cli"
  set_fact:
    heketi_cli: "{{ heketi_config_dir }}/heketi-client/bin/heketi-cli"

- name: "Extract heketi client"
  unarchive:
    src: "{{ heketi_config_dir }}/heketi-client-linux.amd64.tar.gz"
    dest: "{{ heketi_config_dir }}"
    remote_src: yes
    extra_opts:
      - --strip-components=1
      - --one-top-level=heketi-client
    creates: "{{ heketi_cli }}"

- name: "Create heketi namespace"
  k8s:
    state: present
    definition: "{{ lookup('template', 'k8s/namespace.yaml') }}"

- name: "Create heketi service account"
  k8s:
    state: present
    definition: "{{ lookup('template', 'k8s/service-account.yaml') }}"

- name: "Create heketi cluster role binding"
  k8s:
    state: present
    definition: "{{ lookup('template', 'k8s/cluster-role-binding.yaml') }}"

- name: "Create heketi service"
  k8s:
    state: present
    definition: "{{ lookup('template', 'k8s/service.yaml') }}"

- name: "Create heketi deploy deployment"
  k8s:
    state: present
    definition: "{{ lookup('template', 'k8s/heketi-deploy-deployment.yaml') }}"
    wait: true
    wait_sleep: 5
    wait_timeout: 180

# Prepare the heketi-cli command

- name: "Get name of deployment pod"
  k8s_info:
    kind: Pod
    label_selectors:
      - name =  deploy-heketi
  register: heketi_deploy_pod

#- debug:
#    var: heketi_deploy_pod

- name: "Get heketi bootstrap service information"
  k8s_info:
    kind: Service
    name: deploy-heketi
    namespace: "{{ heketi_namespace }}"
  register: heketi_bootstrap_service

#- debug:
#    var: heketi_bootstrap_service

- name: "Set heketi bootstrap endpoint"
  set_fact:
    heketi_bootstrap_endpoint: "{{ heketi_bootstrap_service.resources[0].spec.clusterIP }}:{{ heketi_bootstrap_service.resources[0].spec.ports[0].port }}"

- name: "Set heketi_exec_pod_name"
  set_fact:
    heketi_exec_pod_name: "{{ heketi_deploy_pod.resources[0].metadata.name }}"

- name: "Set heketi_exec_pod command"
  set_fact:
    heketi_exec_pod: "kubectl exec -n {{ heketi_namespace }} {{ heketi_exec_pod_name }} --"

- name: "Set heketi_cli command"
  set_fact:
    heketi_cli: "heketi-cli -s http://{{ heketi_bootstrap_endpoint  }} --user admin --secret {{ heketi_admin_key }}"

- name: "Set heketi_cli_local command"
  set_fact:
    heketi_cli_local: "{{ heketi_config_dir }}/heketi-client/bin/{{ heketi_cli }}"

- debug:
    var: heketi_cli_local

- name: "Set k8s-heketi-cli command"
  set_fact:
    k8s_heketi_cmd: "{{ heketi_exec_pod }} {{ heketi_cli }}"

- debug:
    var: k8s_heketi_cmd

- shell: 'false'

- name: "Load topology file into heteki - this will take >20 minutes: REALLY!"
  command: >-
    {{ heketi_cli_local }} topology load --json="{{ heketi_config_dir }}/heketi-topology.json"
  register: heketi_load_topology

- name: "Display output of load topology"
  debug:
    var: heketi_load_topology

- name: "Setup storage"
  command: >-
    {{ heketi_cli_local }} setup-openshift-heketi-storage --listfile={{ heketi_config_dir }}/heketi-storage.json
  args:
    creates: "{{ heketi_config_dir }}/heketi-storage.json"
